from flask import Flask
from flask import Flask, render_template, Response, redirect, request, session, abort, url_for
import os
import base64
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.fernet import Fernet


from PIL import Image
from datetime import datetime
from datetime import date
import datetime
import random
from random import seed
from random import randint
from werkzeug.utils import secure_filename
from flask import send_file
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import csv
import threading
import time
import shutil
import hashlib
import urllib.request
import urllib.parse
from urllib.request import urlopen
import webbrowser

import pickle
import seaborn as sns
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, confusion_matrix

import mysql.connector

mydb = mysql.connector.connect(
  host="localhost",
  user="root",
  passwd="",
  charset="utf8",
  database="malware_detect"
)


app = Flask(__name__)
##session key
app.secret_key = 'abcdef'
UPLOAD_FOLDER = 'static/upload'
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER
#####

@app.route('/',methods=['POST','GET'])
def index():
    msg=""
       

    return render_template('index.html',msg=msg)

@app.route('/login',methods=['POST','GET'])
def login():
    act=request.args.get("act")
    msg=""
    if request.method == 'POST':
        
        username1 = request.form['uname']
        password1 = request.form['pass']
        mycursor = mydb.cursor()
        mycursor.execute("SELECT count(*) FROM register where uname=%s && pass=%s",(username1,password1))
        myresult = mycursor.fetchone()[0]
        if myresult>0:
            session['username'] = username1
            #result=" Your Logged in sucessfully**"
            return redirect(url_for('userhome')) 
        else:
            msg="You are logged in fail!!!"
        

    return render_template('login.html',msg=msg,act=act)

@app.route('/login_admin',methods=['POST','GET'])
def login_admin():
    act=request.args.get("act")
    msg=""
    if request.method == 'POST':
        
        username1 = request.form['uname']
        password1 = request.form['pass']
        mycursor = mydb.cursor()
        mycursor.execute("SELECT count(*) FROM admin where username=%s && password=%s",(username1,password1))
        myresult = mycursor.fetchone()[0]
        if myresult>0:
            session['username'] = username1
            #result=" Your Logged in sucessfully**"
            return redirect(url_for('admin')) 
        else:
            msg="You are logged in fail!!!"
        

    return render_template('login_admin.html',msg=msg,act=act)

@app.route('/register', methods=['GET', 'POST'])
def register():
    msg=""
    act=request.args.get("act")
    mycursor = mydb.cursor()
    

    if request.method=='POST':
        name=request.form['name']
        city=request.form['city']
        mobile=request.form['mobile']
        email=request.form['email']
        uname=request.form['uname']
        pass1=request.form['pass']

        

        mycursor.execute("SELECT count(*) FROM register where uname=%s",(uname,))
        myresult = mycursor.fetchone()[0]

        if myresult==0:
        
            mycursor.execute("SELECT max(id)+1 FROM register")
            maxid = mycursor.fetchone()[0]
            if maxid is None:
                maxid=1
            
            now = date.today() #datetime.datetime.now()
            rdate=now.strftime("%d-%m-%Y")
            
            sql = "INSERT INTO register(id,name,city,mobile,email,uname,pass,create_date) VALUES (%s,%s,%s,%s,%s,%s,%s,%s)"
            val = (maxid,name,city,mobile,email,uname,pass1,rdate)
            mycursor.execute(sql, val)
            mydb.commit()

            
            print(mycursor.rowcount, "Registered Success")
            act="1"
            
            #if cursor.rowcount==1:
            #    return redirect(url_for('index',act='1'))
        else:
            
            msg='Already Exist!'
            
    
    return render_template('register.html', act=act,msg=msg)


@app.route('/admin', methods=['GET', 'POST'])
def admin():
    msg=""
    uname=""
    if 'username' in session:
        uname = session['username']
    mycursor = mydb.cursor()
    
        
    return render_template('admin.html')

@app.route('/load_data', methods=['GET', 'POST'])
def load_data():
    msg=""
    uname=""
    if 'username' in session:
        uname = session['username']
    mycursor = mydb.cursor()
    
    dat1 = pd.read_csv('static/dataset/dataset_malwares.csv')
    dat=dat1.head(200)
    data=[]
    for ss in dat.values:
        data.append(ss)

    
    return render_template('load_data.html',data=data)

@app.route('/preprocess', methods=['GET', 'POST'])
def preprocess():
    msg=""
    uname=""
    if 'username' in session:
        uname = session['username']
    mycursor = mydb.cursor()

    dat1 = pd.read_csv('static/dataset/dataset_malwares.csv')
    data3=[]
    dat=dat1.head(200)
    rows=len(dat1.values)
    
    for ss3 in dat.values:
        cnt=len(ss3)
        data3.append(ss3)
    cols=cnt
    mem=float(rows)*0.75

    ##
    list_of_column_names=[]
    with open("static/dataset/dataset_malwares.csv") as csv_file:
        csv_reader = csv.reader(csv_file, delimiter = ',')
        list_of_column_names = []
        for row in csv_reader:
            list_of_column_names.append(row)
            break
    ##
    
    dat4=dat1.isna().sum()
    dr=np.stack(dat4)
       
    return render_template('preprocess.html',mem=mem,rows=rows,cols=cols,data3=data3)

@app.route('/feature', methods=['GET', 'POST'])
def feature():
    msg=""
    uname=""
    if 'username' in session:
        uname = session['username']
    mycursor = mydb.cursor()

    data = pd.read_csv('static/dataset/dataset_malwares.csv')
    used_data = data.drop(['Name', 'Machine', 'TimeDateStamp', 'Malware'], axis=1)
    '''plt.figure(figsize=(8, 6))
    ax=sns.countplot(data['Malware'])
    ax.set_xticklabels(['Benign', 'Malware'])
    plt.savefig("static/graph/graph1.png")'''

    #
    features = ['MajorSubsystemVersion', 'MajorLinkerVersion', 'SizeOfCode', 'SizeOfImage', 'SizeOfHeaders', 'SizeOfInitializedData', 
           'SizeOfUninitializedData', 'SizeOfStackReserve', 'SizeOfHeapReserve', 
            'NumberOfSymbols', 'SectionMaxChar']
    i=1
    j=1
    '''for feature in features:
        plt.figure(figsize=(10, 15))
        ax1 = plt.subplot(len(features), 2, i)
        sns.distplot(data[data['Malware']==1][feature], ax=ax1, kde_kws={'bw': 0.1})
        ax1.set_title(f'Malware', fontsize=10)
        ax2 = plt.subplot(len(features), 2, i+1)
        sns.distplot(data[data['Malware']==0][feature], ax=ax2, kde_kws={'bw': 0.1})
        ax2.set_title(f'Benign', fontsize=10)
        #plt.savefig("static/graph/g"+str(j)+".png")
        i= i+2
        j+=1'''

    
        
    return render_template('feature.html')

@app.route('/classify', methods=['GET', 'POST'])
def classify():
    msg=""
    uname=""
    if 'username' in session:
        uname = session['username']
    mycursor = mydb.cursor()

    data = pd.read_csv('static/dataset/dataset_malwares.csv')
    used_data = data.drop(['Name', 'Machine', 'TimeDateStamp', 'Malware'], axis=1)

    #
    features = ['MajorSubsystemVersion', 'MajorLinkerVersion', 'SizeOfCode', 'SizeOfImage', 'SizeOfHeaders', 'SizeOfInitializedData', 
           'SizeOfUninitializedData', 'SizeOfStackReserve', 'SizeOfHeapReserve', 
            'NumberOfSymbols', 'SectionMaxChar']

    X_train, X_test, y_train, y_test = train_test_split(used_data, data['Malware'], test_size=0.2, random_state=0)
    print(f'Number of used features is {X_train.shape[1]}')
    rfc = RandomForestClassifier(n_estimators=100, random_state=0, 
                         oob_score = True,
                         max_depth = 16)
    rfc.fit(X_train, y_train)
    y_pred = rfc.predict(X_test)
    print(classification_report(y_test, y_pred, target_names=['Benign', 'Malware']))
    value=[0.99,0.96,0.97,1004,0.99,1.00,0.99,2919,0.99,0.99,0.99,3923,0.99,0.98,0.98,3923,0.99,0.99,0.99,3923]
    #ax=sns.heatmap(confusion_matrix(y_pred, y_test), annot=True, fmt="d", cmap=plt.cm.Blues, cbar=False)
    #ax.set_xlabel('Predicted labels')
    #ax.set_ylabel('True labels')
    #plt.savefig("static/graph/graph2.png")
    #plt.close()

    #pkl_filename = "rf_model.pkl"
    #with open(pkl_filename, 'wb') as file:
    #    pickle.dump(rfc, file)
    
    importance = rfc.feature_importances_
    importance_dict = {used_data.columns.values[i]: importance[i] for i in range (len(importance))}
    sorted_dict = {k: v for k, v in sorted(importance_dict.items(), key=lambda item: item[1])}
    #plt.figure(figsize=(10, 20))
    #sns.barplot(y=list(sorted_dict.keys())[::-1], x=list(sorted_dict.values())[::-1], palette='mako')
    #plt.title('Features importance')
    #plt.savefig("static/graph/graph3.png")
        
    return render_template('classify.html',value=value)


@app.route('/userhome', methods=['GET', 'POST'])
def userhome():
    msg=""
    uname=""
    st=""
    act=request.args.get("act")
    if 'username' in session:
        uname = session['username']
    mycursor = mydb.cursor()
    

    mycursor.execute("SELECT * FROM register where uname=%s",(uname,))
    data2 = mycursor.fetchone()

    if data2[8]==1:
        st="2"
    else:
        st="1"

        
    if act=="yes":
        print("yes")
        mycursor.execute("update register set status=1 where uname=%s",(uname,))
        mydb.commit()

        mycursor.execute("SELECT count(*) FROM attack1 where uname=%s",(uname,))
        d1 = mycursor.fetchone()[0]
        if d1>0:
            mycursor.execute("SELECT * FROM attack1 where uname=%s",(uname,))
            dd = mycursor.fetchall()
            for ds in dd:
                p=ds[2]
                dr=ds[3]
                #os.remove(p+"/"+dr)
                shutil.rmtree(p+"/"+dr, ignore_errors=True)
                mycursor.execute("delete from attack1 where uname=%s",(uname,))
                mydb.commit()
        ################
        mycursor.execute("SELECT count(*) FROM attack2 where uname=%s",(uname,))
        d2 = mycursor.fetchone()[0]
        if d2>0:
            mycursor.execute("SELECT * FROM attack2 where uname=%s",(uname,))
            dd2 = mycursor.fetchall()
            for ds2 in dd2:
                p2=ds2[2]
                dr2=ds2[3]
                os.remove(p2+"/"+dr2)
                
                mycursor.execute("delete from attack2 where uname=%s",(uname,))
                mydb.commit()
        ################
    
        return redirect(url_for('userhome')) 
    if act=="no":   
        mycursor.execute("update register set status=0 where uname=%s",(uname,))
        mydb.commit()
        return redirect(url_for('userhome')) 

    
        
    return render_template('userhome.html',data2=data2,st=st)



@app.route('/select', methods=['GET', 'POST'])
def select():
    msg=""
    uname=""
    st=""
    act=request.args.get("act")
    if 'username' in session:
        uname = session['username']
    mycursor = mydb.cursor()
    

    mycursor.execute("SELECT * FROM register where uname=%s",(uname,))
    data2 = mycursor.fetchone()

    

    if request.method=='POST':
        file=request.form['file']
        mycursor.execute("update register set setpath=%s where uname=%s",(file,uname))
        mydb.commit()
        return redirect(url_for('userhome')) 
        
    return render_template('select.html',data2=data2,st=st,msg=msg)

@app.route('/attack1', methods=['GET', 'POST'])
def attack1():
    msg=""
    uname=""
    st=""
    act=request.args.get("act")
    if 'username' in session:
        uname = session['username']
    mycursor = mydb.cursor()
    

    mycursor.execute("SELECT * FROM register where uname=%s",(uname,))
    data2 = mycursor.fetchone()

    path=data2[9]
    

    if request.method=='POST':
        j=1
        st="1"
        if data2[8]==0:
            while j<=5:
                rn=randint(1000,3000)
                md=str(rn)
                os.mkdir(path+"/"+md)

                mycursor.execute("SELECT max(id)+1 FROM attack1")
                maxid = mycursor.fetchone()[0]
                if maxid is None:
                    maxid=1
                
                now = date.today() #datetime.datetime.now()
                rdate=now.strftime("%d-%m-%Y")
                
                sql = "INSERT INTO attack1(id,uname,setpath,dirname) VALUES (%s,%s,%s,%s)"
                val = (maxid,uname,path,md)
                mycursor.execute(sql, val)
                mydb.commit()
                
                '''f=open("cdir.txt","r")
                fs=f.read()
                f.close()
                
                if fs=="":
                    f1=open("cdir.txt","w")
                    f1.write(md)
                    f1.close()
                else:
                    f1=open("cdir.txt","a")
                    f1.write(","+md)
                    f1.close()'''
                j+=1
        
    if act=="1":
        st="2"
                        
        
    return render_template('attack1.html',act=act,data2=data2,st=st,msg=msg)


@app.route('/attack2', methods=['GET', 'POST'])
def attack2():
    msg=""
    uname=""
    st=""
    act=request.args.get("act")
    if 'username' in session:
        uname = session['username']
    mycursor = mydb.cursor()
    

    mycursor.execute("SELECT * FROM register where uname=%s",(uname,))
    data2 = mycursor.fetchone()

    path=data2[9]
    

    if request.method=='POST':
        j=1
        st="1"
        if data2[8]==0:
            while j<=3:
                rn1=randint(1000,9999)
                rn2=randint(1000,9999)
                rn3=randint(1000,9999)
                m1=str(rn1)
                m2=str(rn2)
                m3=str(rn3)
                fn=m1+m2+m3+".ttt"

                shutil.copy("static/lib/a1.txt",path+"/"+fn)
                
                mycursor.execute("SELECT max(id)+1 FROM attack2")
                maxid = mycursor.fetchone()[0]
                if maxid is None:
                    maxid=1
                
                now = date.today() #datetime.datetime.now()
                rdate=now.strftime("%d-%m-%Y")
                
                sql = "INSERT INTO attack2(id,uname,setpath,filename) VALUES (%s,%s,%s,%s)"
                val = (maxid,uname,path,fn)
                mycursor.execute(sql, val)
                mydb.commit()
               
                j+=1
        
    if act=="1":
        st="2"
                        
        
    return render_template('attack2.html',act=act,data2=data2,st=st,msg=msg)

@app.route('/attack3', methods=['GET', 'POST'])
def attack3():
    msg=""
    uname=""
    st=""
    ss=""
    data3=[]
    act=request.args.get("act")
    if 'username' in session:
        uname = session['username']
    mycursor = mydb.cursor()
    

    mycursor.execute("SELECT * FROM register where uname=%s",(uname,))
    data2 = mycursor.fetchone()

    mycursor.execute("SELECT count(*) FROM attack3 where uname=%s",(uname,))
    cc = mycursor.fetchone()[0]
    if cc>0:
        ss="1"
        mycursor.execute("SELECT * FROM attack3 where uname=%s",(uname,))
        data3 = mycursor.fetchall()

    path=data2[9]
    
    
    if request.method=='POST':
        j=1
        st="1"
        if data2[8]==0:

            for fname in os.listdir(path):
                print(fname)
                f=fname.split(".")
                print(f)
                if os.path.isfile(path+"/"+fname):  
                    
                    
                    if f[1]=="ttt":
                        a='1'
                    else:
                        mycursor.execute("SELECT count(*) FROM attack3 where setpath=%s && filename=%s && uname=%s",(path,fname,uname))
                        cn3 = mycursor.fetchone()[0]
                        if cn3==0:
                            ##
                            password_provided = uname # This is input in the form of a string
                            password = password_provided.encode() # Convert to type bytes
                            salt = b'salt_' # CHANGE THIS - recommend using a key from os.urandom(16), must be of type bytes
                            kdf = PBKDF2HMAC(
                                algorithm=hashes.SHA256(),
                                length=32,
                                salt=salt,
                                iterations=100000,
                                backend=default_backend()
                            )
                            key = base64.urlsafe_b64encode(kdf.derive(password))

                            input_file = path+'/'+fname
                            output_file = path+'/'+fname
                            with open(input_file, 'rb') as f:
                                dataa = f.read()

                            fernet = Fernet(key)
                            encrypted = fernet.encrypt(dataa)

                            with open(output_file, 'wb') as f:
                                f.write(encrypted)
                            ###
                            ##
                            mycursor.execute("SELECT max(id)+1 FROM attack3")
                            maxid = mycursor.fetchone()[0]
                            if maxid is None:
                                maxid=1
                            
                            now = date.today() #datetime.datetime.now()
                            rdate=now.strftime("%d-%m-%Y")
                            
                            sql = "INSERT INTO attack3(id,uname,setpath,filename) VALUES (%s,%s,%s,%s)"
                            val = (maxid,uname,path,fname)
                            mycursor.execute(sql, val)
                            mydb.commit()
               
                j+=1
        
    if act=="1":
        st="2"
                        
        
    return render_template('attack3.html',act=act,data2=data2,st=st,msg=msg,data3=data3,ss=ss,cc=cc)


@app.route('/logout')
def logout():
    # remove the username from the session if it is there
    session.pop('username', None)
    return redirect(url_for('index'))


if __name__ == "__main__":
    app.secret_key = os.urandom(12)
    app.run(debug=True,host='0.0.0.0', port=5000)
